TIME(2)                               Linux Programmer's Manual                               TIME(2)

NNAAMMEE
       time - get time in seconds

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ttiimmee..hh>>

       ttiimmee__tt ttiimmee((ttiimmee__tt **_t_l_o_c));;

DDEESSCCRRIIPPTTIIOONN
       ttiimmee()  returns  the  time as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000
       (UTC).

       If _t_l_o_c is non-NULL, the return value is also stored in the memory pointed to by _t_l_o_c.

RREETTUURRNN VVAALLUUEE
       On success, the value of time in seconds since the Epoch is returned.  On error, _(_(_t_i_m_e___t_) _-_1_)
       is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEFFAAUULLTT _t_l_o_c points outside your accessible address space (but see BUGS).

              On  systems  where the C library ttiimmee() wrapper function invokes an implementation pro‐
              vided by the vvddssoo(7) (so that there is no trap into the kernel), an invalid address may
              instead trigger a SSIIGGSSEEGGVV signal.

CCOONNFFOORRMMIINNGG TTOO
       SVr4, 4.3BSD, C89, C99, POSIX.1-2001.  POSIX does not specify any error conditions.

NNOOTTEESS
       POSIX.1  defines  _s_e_c_o_n_d_s _s_i_n_c_e _t_h_e _E_p_o_c_h using a formula that approximates the number of sec‐
       onds between a specified time and the Epoch.  This formula takes account of the facts that all
       years  that  are  evenly divisible by 4 are leap years, but years that are evenly divisible by
       100 are not leap years unless they are also evenly divisible by 400, in which  case  they  are
       leap  years.   This value is not the same as the actual number of seconds between the time and
       the Epoch, because of leap seconds and because system clocks are not required to  be  synchro‐
       nized  to a standard reference.  The intention is that the interpretation of seconds since the
       Epoch values be consistent; see POSIX.1-2008 Rationale A.4.15 for further rationale.

       On Linux, a call to ttiimmee() with _t_l_o_c specified as NULL cannot fail with the  error  EEOOVVEERRFFLLOOWW,
       even  on  ABIs where _t_i_m_e___t is a signed 32-bit integer and the clock ticks past the time 2**31
       (2038-01-19 03:14:08 UTC, ignoring leap seconds).  (POSIX.1 permits, but does not require, the
       EEOOVVEERRFFLLOOWW  error  in  the  case  where  the  seconds  since the Epoch will not fit in _t_i_m_e___t.)
       Instead, the behavior on Linux is undefined when the system time is out of the  _t_i_m_e___t  range.
       Applications intended to run after 2038 should use ABIs with _t_i_m_e___t wider than 32 bits.

BBUUGGSS
       Error  returns  from  this  system call are indistinguishable from successful reports that the
       time is a few seconds _b_e_f_o_r_e the Epoch, so the C library wrapper function never sets _e_r_r_n_o  as
       a result of this call.

       The  _t_l_o_c  argument  is obsolescent and should always be NULL in new code.  When _t_l_o_c is NULL,
       the call cannot fail.

SSEEEE AALLSSOO
       ddaattee(1), ggeettttiimmeeooffddaayy(2), ccttiimmee(3), ffttiimmee(3), ttiimmee(7), vvddssoo(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the  Linux  _m_a_n_-_p_a_g_e_s  project.   A  description  of  the
       project,  information  about reporting bugs, and the latest version of this page, can be found
       at http://www.kernel.org/doc/man-pages/.

Linux                                         2015-12-28                                      TIME(2)
